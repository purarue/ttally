#!/usr/bin/env python3

"""
This script uses the local ttally data to figure out when I should
next do a task, based on the last time I did it and a frequency
"""

import json
import time
from typing import (
    List,
    get_args,
    Any,
    Union,
    assert_never,
    NamedTuple,
    Iterator,
    Type,
    Sequence,
    Callable,
    Optional,
    Literal,
)
from functools import cache
from datetime import datetime, timedelta

import click
import ttally.core as ttally
import more_itertools

_CACHE: dict[str, list[NamedTuple]] = {}


class CachedExtension(ttally.Extension):
    def glob_namedtuple(self, nt: Type[NamedTuple]) -> Iterator[NamedTuple]:
        type_name = nt.__name__
        if type_name not in _CACHE:
            _CACHE[type_name] = list(super().glob_namedtuple(nt))
        return more_itertools.always_iterable(_CACHE[type_name])


ext = CachedExtension()


@cache
def _extract_dt_attr(item: Type[NamedTuple]) -> str:
    return CachedExtension.namedtuple_extract_from_annotation(item, datetime)


def when(item: NamedTuple) -> datetime:
    dt_attr = _extract_dt_attr(type(item))
    dt_val = getattr(item, dt_attr)
    assert isinstance(dt_val, datetime)
    return dt_val.astimezone()


def since(item: NamedTuple) -> timedelta:
    return datetime.now().astimezone() - when(item)


def recent(results: list[NamedTuple]) -> Optional[NamedTuple]:
    if len(results) == 0:
        return None
    return max(results, key=when)


QueryFunc = Callable[[NamedTuple], bool]


def _infer_model(query: QueryFunc) -> Type[NamedTuple]:
    import inspect

    # inspect the callable name
    # to determine the model type

    params = list(inspect.signature(query).parameters)
    if len(params) != 1:
        raise ValueError(
            f"Query must take exactly one argument, the name of the model, known={list(ext.MODELS)}"
        )
    if params[0] not in ext.MODELS:
        raise ValueError(
            f"Unknown model type, known={list(ext.MODELS)}, got={params[0]}"
        )

    model_type = ext.MODELS[params[0]]
    return model_type


def dt_humanize(dt: datetime) -> str:
    import arrow

    # if more than two days away, then just say in 'days'
    # otherwise, say hours
    hours_distance = abs((dt.timestamp() - time.time()) / 3600)
    if hours_distance > 48:
        return arrow.get(dt).humanize(granularity=["day"])
    else:
        if hours_distance < 2:
            return arrow.get(dt).humanize(granularity=["minute"])
        else:
            return arrow.get(dt).humanize(granularity=["hour"])


# TODO: add table
LineFormat = Literal["human", "json"]


def format_dt(dt: datetime, date_fmt: str) -> str:
    match date_fmt:
        case "epoch":
            return str(dt.timestamp())
        case "human":
            return dt_humanize(dt)
        case "iso":
            return dt.isoformat()
        case "date":
            return dt.strftime("%Y-%m-%d")
        case _:
            try:
                return dt.strftime(date_fmt)
            except ValueError as e:
                raise ValueError(
                    "Invalid date format, should be one of epoch, human, iso, date, or a valid strftime format"
                ) from e


def desc(
    item: Optional[NamedTuple] = None,
    *,
    date_fmt: str = "human",
    name: Optional[Union[str, Callable[[Optional[NamedTuple]], str]]] = None,
    line_format: LineFormat = "human",
    with_timedelta: Optional[timedelta] = None,
) -> str | None:
    """
    a helper that lets me print a description of an item in a more useful way

    with_timedelta: if provided, will also include some fields that add the timedelta to the date.
    name: if provided, will use string. A callable can also be passed, or an 'attribute string', like
            'food.food' or 'food.when' to get the value of that attribute on the item

    this lets me see the last time I did something, and when I should do it next
    """

    use_name: str
    if name is None and item is not None:
        use_name = item.__class__.__name__.casefold()
    elif callable(name):
        use_name = name(item)
    else:
        use_name = name or "Untitled"

    if item is None:
        match line_format:
            case "human":
                return None
            case "json":
                return json.dumps({"name": name, "when": None})
            case _:
                assert_never(line_format)

    dt: datetime
    with_timedelta_dt: datetime | None = None
    td_str: str | None = None

    if item is not None:
        dt = when(item)
        use_dt: str = format_dt(dt, date_fmt)

        if with_timedelta:
            with_timedelta_dt = dt + with_timedelta
            td_str = format_dt(with_timedelta_dt, date_fmt)

    buf: str
    match line_format:
        case "human":
            buf = f"{use_name}: {use_dt}"
            if td_str:
                buf += f" (next {td_str})"
        case "json":
            d = {
                "name": use_name,
                "when": use_dt,
                "epoch": int(dt.timestamp()),
            }
            if td_str and with_timedelta_dt:
                d["next"] = td_str
                d["next_epoch"] = int(with_timedelta_dt.timestamp())
                d["expired"] = with_timedelta_dt < datetime.now().astimezone()

            buf = json.dumps(d)
        case _:
            assert_never(line_format)

    return buf


def descs(items: list[Optional[NamedTuple]], **kwargs: Any) -> list[str | None]:
    return [desc(item, **kwargs) for item in items]


class Query(NamedTuple):
    filter: QueryFunc
    raw_str: str
    model_type: Type[NamedTuple]
    action: Optional[Callable[[Union[NamedTuple, list[NamedTuple]]], None]]
    action_on_results: bool = False

    @staticmethod
    def from_str(s: str) -> "Query":

        if ">>>" in s:
            query_str, _, action_str = s.partition(">>>")
            query = eval(query_str)
            if not callable(query):
                raise ValueError(f"Query must be callable, got {query}")

            Model = _infer_model(query)
            action = f"lambda results: {action_str}"

            return Query(
                filter=query,
                raw_str=s,
                model_type=Model,
                action=eval(action),
                action_on_results=True,
            )

        elif ">>" in s:
            query_str, _, action_str = s.partition(">>")
            query = eval(query_str)

            if not callable(query):
                raise ValueError(f"Query must be callable, got {query}")

            Model = _infer_model(query)
            action = f"lambda {Model.__name__.casefold()}: {action_str}"
            return Query(
                filter=query,
                raw_str=s,
                model_type=Model,
                action=eval(action),
                action_on_results=False,
            )

        else:
            query = eval(s)
            if not callable(query):
                raise ValueError(f"Query must be callable, got {query}")

            Model = _infer_model(query)
            return Query(
                filter=query,
                raw_str=s,
                model_type=Model,
                action=None,
                action_on_results=False,
            )

    def run_action(self, item: List[NamedTuple] | NamedTuple) -> None:
        if self.action:
            try:
                self.action(item)
            except NameError as ne:
                if ne.name == "results":
                    if ">>>" not in self.raw_str:
                        click.echo(
                            f"Error: For '{self.raw_str}', to use the 'results' variable, you must have >>> instead of >> in your query",
                            err=True,
                        )
                        exit(1)
                elif ne.name == self.model_type.__name__.casefold():
                    if ">>>" in self.raw_str:
                        click.echo(
                            f"Error: For '{self.raw_str}', when using >>>, you must use the variable 'results' to refer to the list of results, Use >> to access each item individually",
                            err=True,
                        )
                        exit(1)
                raise ne

    def run(self) -> None:
        items = []
        for item in ext.glob_namedtuple(self.model_type):
            if self.filter(item):
                if not self.action:
                    print(item)
                else:
                    if self.action_on_results:
                        items.append(item)
                    else:
                        self.run_action(item)

        if self.action_on_results and self.action:
            self.run_action(items)


@click.group()
def main() -> None:
    pass


@main.command()
@click.option(
    "-e",
    "--eval",
    "eval_str",
    multiple=True,
    type=str,
    default=(),
    help="Evaluate some python code before running the queries",
)
@click.argument("QUERY", type=str, nargs=-1)
def query(eval_str: Sequence[str], query: Sequence[str]) -> None:
    """
    each query is a python lambda filter
    which is applied to the list of items from the model

    These use my models for examples:
        https://sean.fish/d/ttally.py?redirect

    The name of the variable in the lambda determines the ttally model type

    You can pass more than one query, the model results are cached so that
    the data is only read from disk once


    \b
    There are a few helper functions to make it easier to write:
        when - returns the datetime for when last time was done
        since - returns a timedelta between the date of the item and now
        recent - given a list of items, returns the most recent datetime
        desc - returns a human readable description of the item
        descs - for 'results', returns a list of human readable descriptions of the items
        dt_humanize and format_dt - for formatting datetimes

    \b
    for example, for the food model, to print any vitamins I ate in the last day
        'lambda food: "vitamin" in food.food and since(food) < timedelta(days=1)'

    \b
    to check if Ive logged my weight in the last week
        'lambda weight: since(weight) < timedelta(weeks=1)'

    \b
    To perform a different action on each result, add a '>>' after the lambda, with some other
    code to run. For example, to print everything that is over 1000 calories:
        'lambda food: food.quantity * food.calories > 1000 >> print(food.food, food.when)'

    \b
    If you instead want to run a function on the list of results, you can use a '>>>'
    and use the variable 'results' to refer to the list of results. A very common way
    I use this script is with the desc function and JSON format, to figure out
    when the last time I did something was, and then when I should do it next:
        'lambda food: "vitamin" in food.food >>> print(desc(recent(results), name="vitamin", with_timedelta=timedelta(hours=24), line_format="json"))'
    """
    if eval_str:
        for s in eval_str:
            exec(s)

    parsed_queries = [Query.from_str(q) for q in query]
    if not parsed_queries:
        click.echo("No queries provided", err=True)
        return
    for q in parsed_queries:
        q.run()


DisplayFormat = Literal["name", "table", "json"]


@main.command()
@click.option("-k", "--sort-key", type=str, default="next_epoch")
@click.option("-r", "--sort-reverse", is_flag=True, default=False, help="reverse sort")
@click.option(
    "-e/-a",
    "--expired/--all",
    is_flag=True,
    default=False,
    help="only show expired items",
)
@click.option(
    "-f", "--table-format", type=str, default="simple_outline", help="table format"
)
@click.option(
    "-o",
    "--output-format",
    type=click.Choice(get_args(DisplayFormat)),
    default="table",
)
# https://github.com/seanbreckenridge/reminder-sink
@click.option(
    "-s/-h",
    "--show-silenced/--hide-silenced",
    default=True,
    help="if the 'silenced' key is present, filter out items that are silenced",
)
def display(
    sort_key: str,
    sort_reverse: bool,
    expired: bool,
    output_format: DisplayFormat,
    table_format: str,
    show_silenced: bool,
) -> None:
    """
    takes the json output from STDIN and creates nicer
    output for the terminal

    Input should be JSONL (newline separated JSON objects, not a list)

    e.g.
    {"name": "vitamin", "when": "26 hours ago", "epoch": 1709492497, "next": "3 hours ago", "next_epoch": 1709575297, "expired": true}

    ttally-when query | jq ... | ttally-when display -e
    """
    import tabulate

    def _filter() -> Iterator[dict[str, Any]]:
        for line in click.get_text_stream("stdin"):
            data = json.loads(line)
            if expired and not data["expired"]:
                continue
            if not show_silenced and data.get("silenced", False):
                continue
            yield data

    data = list(_filter())

    data.sort(key=lambda d: d[sort_key], reverse=sort_reverse)

    match output_format:
        case "json":
            click.echo(json.dumps(data))
        case "name":
            click.echo("\n".join(d["name"] for d in data))
        case "table":
            click.echo(
                tabulate.tabulate(
                    [
                        [
                            d["name"],
                            d["when"],
                            click.style(
                                d["next"], fg="red" if d["expired"] else "green"
                            ),
                        ]
                        for d in data
                    ],
                    headers=["name", "when", "next"],
                    tablefmt=table_format,
                    numalign="right",
                    stralign="right",
                )
            )


if __name__ == "__main__":
    main()
