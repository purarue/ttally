#!/usr/bin/env python3

"""
This script uses the local ttally data to figure out when I should
next do a task, based on the last time I did it and a frequency
"""

import json
from typing import (
    get_args,
    Any,
    Iterator,
    Sequence,
    Literal,
)

import click
from ttally import when


ext = when.CachedExtension()


@click.group()
def main() -> None:
    pass


@main.command()
@click.option(
    "-e",
    "--eval",
    "eval_str",
    multiple=True,
    type=str,
    default=(),
    help="Evaluate some python code before running the queries",
)
@click.argument("QUERY", type=str, nargs=-1)
def query(eval_str: Sequence[str], query: Sequence[str]) -> None:
    """
    each query is a python lambda filter
    which is applied to the list of items from the model

    These use my models for examples:
        https://purarue.xyz/d/ttally.py?redirect

    The name of the variable in the lambda determines the ttally model type

    You can pass more than one query, the model results are cached so that
    the data is only read from disk once


    \b
    There are a few helper functions to make it easier to write:
        when - returns the datetime for when last time was done
        since - returns a timedelta between the date of the item and now
        recent - given a list of items, returns the most recent datetime
        desc - returns a human readable description of the item
        descs - for 'results', returns a list of human readable descriptions of the items
        dt_humanize and format_dt - for formatting datetimes

    \b
    for example, for the food model, to print any vitamins I ate in the last day
        'lambda food: "vitamin" in food.food and since(food) < timedelta(days=1)'

    \b
    to check if Ive logged my weight in the last week
        'lambda weight: since(weight) < timedelta(weeks=1)'

    \b
    To perform a different action on each result, add a '>>' after the lambda, with some other
    code to run. For example, to print everything that is over 1000 calories:
        'lambda food: food.quantity * food.calories > 1000 >> print(food.food, food.when)'

    \b
    If you instead want to run a function on the list of results, you can use a '>>>'
    and use the variable 'results' to refer to the list of results. A very common way
    I use this script is with the desc function and JSON format, to figure out
    when the last time I did something was, and then when I should do it next:
        'lambda food: "vitamin" in food.food >>> print(desc(recent(results), name="vitamin", with_timedelta=timedelta(hours=24), line_format="json"))'
    """
    if eval_str:
        for s in eval_str:
            exec(s)

    parsed_queries = [when.Query.from_str(q, ext=ext) for q in query]
    if not parsed_queries:
        click.echo("No queries provided", err=True)
        return
    for q in parsed_queries:
        q.run(ext=ext)


DisplayFormat = Literal["name", "table", "json"]


def _color(s: str, is_expired: bool, is_silenced: bool) -> str:
    if is_expired:
        if is_silenced:
            return click.style(s, fg="blue")
        else:
            return click.style(s, fg="red")
    return click.style(s, fg="green")


@main.command()
@click.option("-k", "--sort-key", type=str, default="next_epoch")
@click.option("-r", "--sort-reverse", is_flag=True, default=False, help="reverse sort")
@click.option(
    "-e/-a",
    "--expired/--all",
    is_flag=True,
    default=False,
    help="only show expired items",
)
@click.option(
    "-f", "--table-format", type=str, default="simple_outline", help="table format"
)
@click.option(
    "-o",
    "--output-format",
    type=click.Choice(get_args(DisplayFormat)),
    default="table",
)
# https://github.com/purarue/reminder-sink
@click.option(
    "-s/-h",
    "--show-silenced/--hide-silenced",
    default=True,
    help="if the 'silenced' key is present, filter out items that are silenced",
)
def display(
    sort_key: str,
    sort_reverse: bool,
    expired: bool,
    output_format: DisplayFormat,
    table_format: str,
    show_silenced: bool,
) -> None:
    """
    takes the json output from STDIN and creates nicer
    output for the terminal

    Input should be JSONL (newline separated JSON objects, not a list)

    e.g.
    {"name": "vitamin", "when": "26 hours ago", "epoch": 1709492497, "next": "3 hours ago", "next_epoch": 1709575297, "expired": true}

    ttally-when query '...' | jq ... | ttally-when display -e
    """
    import tabulate

    def _filter() -> Iterator[dict[str, Any]]:
        for line in click.get_text_stream("stdin"):
            data = json.loads(line)
            # no data, must be null
            if not data["when"]:
                continue
            if expired and not data["expired"]:
                continue
            if not show_silenced and data.get("silenced", False):
                continue
            yield data

    data = list(_filter())

    data.sort(key=lambda d: d[sort_key], reverse=sort_reverse)

    match output_format:
        case "json":
            click.echo(json.dumps(data))
        case "name":
            click.echo("\n".join(d["name"] for d in data))
        case "table":
            click.echo(
                tabulate.tabulate(
                    [
                        [
                            d["name"],
                            d["when"],
                            _color(d["next"], d["expired"], d.get("silenced", False)),
                        ]
                        for d in data
                    ],
                    headers=["name", "last", "next"],
                    tablefmt=table_format,
                    numalign="right",
                    stralign="right",
                )
            )


if __name__ == "__main__":
    main()
