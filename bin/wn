#!/usr/bin/env bash
# add water now
# first argument specifies number of glasses
#
# e.g. wn 1.5 to add 1.5 glasses
#
# 'wn -p' prints most common glass counts
# that can be used like
# wn -p | fzf | cut -d' ' -f2 | xargs -r wn
# to add that number of glasses to the water file
#
# I call this using an i3 mode launcher:
# https://github.com/seanbreckenridge/dotfiles/commit/5b0943507593fee7c59bf337ae2f16500731e140

readonly script_name='wn'

havecmd() {
	local BINARY ERRMSG
	# error if first argument isn't provided
	BINARY="${1:?Must provide command to check}"
	# the commend exists, exit with 0 (success!)
	if command -v "${BINARY}" >/dev/null 2>&1; then
		return 0
	else
		# construct error message
		ERRMSG="'${script_name}' requires '${BINARY}', could not find that on your \$PATH"
		if [[ -n "$2" ]]; then
			ERRMSG="${ERRMSG}. $2"
		fi
		printf '%s\n' "${ERRMSG}" 1>&2
		return 1
	fi
}

set -e
havecmd jq
havecmd awk
havecmd chomp 'Install from https://github.com/seanbreckenridge/chomp'
set +e

main() {

	while getopts "p" opt; do
		case "${opt}" in
		p)
			# get an ordered list of the most common glass counts
			# print/send a notification of the the most common bindings
			python3 -m ttally export water --stream |
				jq '.glasses' |
				sort -n |
				uniq -c |
				chomp |
				sort -rn |
				cut -d' ' -f2 |
				head -n9
			exit 0
			;;
		*)
			printf 'Unknown argument: %s\n' "${opt}"
			exit 1
			;;
		esac
	done

	shift "$((OPTIND - 1))"

	# default to '1' glass, if no arguments are supplied
	local GLASSES
	GLASSES="${1:-1}"

	print-or-notify "[water] adding ${GLASSES}"

	# construct JSON and send it to ttally to add to the file
	local JSON_DATA
	JSON_DATA="$(jq -n \
		--arg TIMESTAMP "$(date '+%s')" \
		--arg GLASSES "${GLASSES}" \
		'[{"when":$TIMESTAMP | tonumber, "glasses": $GLASSES | tonumber}]')" || return $?
	python3 -m ttally from-json water <<<"${JSON_DATA}" || return $?

	# print recent items so I can review
	print-or-notify "$(python3 -m ttally recent water)"
}

main "$@" || exit $?
